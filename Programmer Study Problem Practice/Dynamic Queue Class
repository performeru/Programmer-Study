#include <iostream>

class Queue
{
private:
    struct Element
    {
        int value{};
        Element* pNext{};
    };

    Element* pFront{};
    Element* pRear{};
    int count{};

public:
    Queue() : pFront(nullptr), pRear(nullptr), count(0) {}

    void Enqueue(int value)
    {
        Element* pElement = new Element{};
        pElement->value = value;
        pElement->pNext = nullptr;

        if (count == 0)
        {
            pFront = pElement;
            pRear = pElement;
        }
        else
        {
            pRear->pNext = pElement;
            pRear = pElement;
        }

        count++;
    }

    void Dequeue()
    {
        if (count == 0)
        {
            std::cout << "QUEUE IS EMPTY" << std::endl;
            return;
        }

        Element* pFrontElement = pFront;
        pFront = pFrontElement->pNext;
        count--;

        delete pFrontElement;
    }

    void Print()
    {
        Element* pElement = pFront;

        while (pElement)
        {
            std::cout << pElement->value << std::endl;
            pElement = pElement->pNext;
        }
        std::cout << "----------" << std::endl;
    }

    void DeleteAll()
    {
        Element* pElement = pFront;
        Element* pNext;

        while (pElement)
        {
            pNext = pElement->pNext;
            delete pElement;
            pElement = pNext;
        }

        count = 0;
        pFront = nullptr;
        pRear = nullptr;
    }
};

int main()
{
    Queue queue;

    queue.Enqueue(30);
    queue.Enqueue(20);
    queue.Enqueue(10);
    queue.Print();

    queue.Dequeue();
    queue.Print();

    queue.DeleteAll();
    queue.Print();

    return 0;
}
